// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SayHello1Client is the client API for SayHello1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SayHello1Client interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type sayHello1Client struct {
	cc grpc.ClientConnInterface
}

func NewSayHello1Client(cc grpc.ClientConnInterface) SayHello1Client {
	return &sayHello1Client{cc}
}

func (c *sayHello1Client) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/SayHello1/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SayHello1Server is the server API for SayHello1 service.
// All implementations must embed UnimplementedSayHello1Server
// for forward compatibility
type SayHello1Server interface {
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	mustEmbedUnimplementedSayHello1Server()
}

// UnimplementedSayHello1Server must be embedded to have forward compatible implementations.
type UnimplementedSayHello1Server struct {
}

func (UnimplementedSayHello1Server) SayHello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedSayHello1Server) mustEmbedUnimplementedSayHello1Server() {}

// UnsafeSayHello1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SayHello1Server will
// result in compilation errors.
type UnsafeSayHello1Server interface {
	mustEmbedUnimplementedSayHello1Server()
}

func RegisterSayHello1Server(s grpc.ServiceRegistrar, srv SayHello1Server) {
	s.RegisterService(&SayHello1_ServiceDesc, srv)
}

func _SayHello1_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SayHello1Server).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SayHello1/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SayHello1Server).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SayHello1_ServiceDesc is the grpc.ServiceDesc for SayHello1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SayHello1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SayHello1",
	HandlerType: (*SayHello1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _SayHello1_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "some.proto",
}

// SayHello2Client is the client API for SayHello2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SayHello2Client interface {
	SayHello(ctx context.Context, opts ...grpc.CallOption) (SayHello2_SayHelloClient, error)
}

type sayHello2Client struct {
	cc grpc.ClientConnInterface
}

func NewSayHello2Client(cc grpc.ClientConnInterface) SayHello2Client {
	return &sayHello2Client{cc}
}

func (c *sayHello2Client) SayHello(ctx context.Context, opts ...grpc.CallOption) (SayHello2_SayHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &SayHello2_ServiceDesc.Streams[0], "/SayHello2/SayHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &sayHello2SayHelloClient{stream}
	return x, nil
}

type SayHello2_SayHelloClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloResponse, error)
	grpc.ClientStream
}

type sayHello2SayHelloClient struct {
	grpc.ClientStream
}

func (x *sayHello2SayHelloClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sayHello2SayHelloClient) CloseAndRecv() (*HelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SayHello2Server is the server API for SayHello2 service.
// All implementations must embed UnimplementedSayHello2Server
// for forward compatibility
type SayHello2Server interface {
	SayHello(SayHello2_SayHelloServer) error
	mustEmbedUnimplementedSayHello2Server()
}

// UnimplementedSayHello2Server must be embedded to have forward compatible implementations.
type UnimplementedSayHello2Server struct {
}

func (UnimplementedSayHello2Server) SayHello(SayHello2_SayHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedSayHello2Server) mustEmbedUnimplementedSayHello2Server() {}

// UnsafeSayHello2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SayHello2Server will
// result in compilation errors.
type UnsafeSayHello2Server interface {
	mustEmbedUnimplementedSayHello2Server()
}

func RegisterSayHello2Server(s grpc.ServiceRegistrar, srv SayHello2Server) {
	s.RegisterService(&SayHello2_ServiceDesc, srv)
}

func _SayHello2_SayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SayHello2Server).SayHello(&sayHello2SayHelloServer{stream})
}

type SayHello2_SayHelloServer interface {
	SendAndClose(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type sayHello2SayHelloServer struct {
	grpc.ServerStream
}

func (x *sayHello2SayHelloServer) SendAndClose(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sayHello2SayHelloServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SayHello2_ServiceDesc is the grpc.ServiceDesc for SayHello2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SayHello2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SayHello2",
	HandlerType: (*SayHello2Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHello",
			Handler:       _SayHello2_SayHello_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "some.proto",
}

// SayHello3Client is the client API for SayHello3 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SayHello3Client interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (SayHello3_SayHelloClient, error)
}

type sayHello3Client struct {
	cc grpc.ClientConnInterface
}

func NewSayHello3Client(cc grpc.ClientConnInterface) SayHello3Client {
	return &sayHello3Client{cc}
}

func (c *sayHello3Client) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (SayHello3_SayHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &SayHello3_ServiceDesc.Streams[0], "/SayHello3/SayHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &sayHello3SayHelloClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SayHello3_SayHelloClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type sayHello3SayHelloClient struct {
	grpc.ClientStream
}

func (x *sayHello3SayHelloClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SayHello3Server is the server API for SayHello3 service.
// All implementations must embed UnimplementedSayHello3Server
// for forward compatibility
type SayHello3Server interface {
	SayHello(*HelloRequest, SayHello3_SayHelloServer) error
	mustEmbedUnimplementedSayHello3Server()
}

// UnimplementedSayHello3Server must be embedded to have forward compatible implementations.
type UnimplementedSayHello3Server struct {
}

func (UnimplementedSayHello3Server) SayHello(*HelloRequest, SayHello3_SayHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedSayHello3Server) mustEmbedUnimplementedSayHello3Server() {}

// UnsafeSayHello3Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SayHello3Server will
// result in compilation errors.
type UnsafeSayHello3Server interface {
	mustEmbedUnimplementedSayHello3Server()
}

func RegisterSayHello3Server(s grpc.ServiceRegistrar, srv SayHello3Server) {
	s.RegisterService(&SayHello3_ServiceDesc, srv)
}

func _SayHello3_SayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SayHello3Server).SayHello(m, &sayHello3SayHelloServer{stream})
}

type SayHello3_SayHelloServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type sayHello3SayHelloServer struct {
	grpc.ServerStream
}

func (x *sayHello3SayHelloServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SayHello3_ServiceDesc is the grpc.ServiceDesc for SayHello3 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SayHello3_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SayHello3",
	HandlerType: (*SayHello3Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHello",
			Handler:       _SayHello3_SayHello_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "some.proto",
}

// SayHello4Client is the client API for SayHello4 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SayHello4Client interface {
	SayHello(ctx context.Context, opts ...grpc.CallOption) (SayHello4_SayHelloClient, error)
}

type sayHello4Client struct {
	cc grpc.ClientConnInterface
}

func NewSayHello4Client(cc grpc.ClientConnInterface) SayHello4Client {
	return &sayHello4Client{cc}
}

func (c *sayHello4Client) SayHello(ctx context.Context, opts ...grpc.CallOption) (SayHello4_SayHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &SayHello4_ServiceDesc.Streams[0], "/SayHello4/SayHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &sayHello4SayHelloClient{stream}
	return x, nil
}

type SayHello4_SayHelloClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type sayHello4SayHelloClient struct {
	grpc.ClientStream
}

func (x *sayHello4SayHelloClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sayHello4SayHelloClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SayHello4Server is the server API for SayHello4 service.
// All implementations must embed UnimplementedSayHello4Server
// for forward compatibility
type SayHello4Server interface {
	SayHello(SayHello4_SayHelloServer) error
	mustEmbedUnimplementedSayHello4Server()
}

// UnimplementedSayHello4Server must be embedded to have forward compatible implementations.
type UnimplementedSayHello4Server struct {
}

func (UnimplementedSayHello4Server) SayHello(SayHello4_SayHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedSayHello4Server) mustEmbedUnimplementedSayHello4Server() {}

// UnsafeSayHello4Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SayHello4Server will
// result in compilation errors.
type UnsafeSayHello4Server interface {
	mustEmbedUnimplementedSayHello4Server()
}

func RegisterSayHello4Server(s grpc.ServiceRegistrar, srv SayHello4Server) {
	s.RegisterService(&SayHello4_ServiceDesc, srv)
}

func _SayHello4_SayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SayHello4Server).SayHello(&sayHello4SayHelloServer{stream})
}

type SayHello4_SayHelloServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type sayHello4SayHelloServer struct {
	grpc.ServerStream
}

func (x *sayHello4SayHelloServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sayHello4SayHelloServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SayHello4_ServiceDesc is the grpc.ServiceDesc for SayHello4 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SayHello4_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SayHello4",
	HandlerType: (*SayHello4Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHello",
			Handler:       _SayHello4_SayHello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "some.proto",
}
