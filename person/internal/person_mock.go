// Code generated by MockGen. DO NOT EDIT.
// Source: person.go

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPerson is a mock of Person interface.
type MockPerson struct {
	ctrl     *gomock.Controller
	recorder *MockPersonMockRecorder
}

// MockPersonMockRecorder is the mock recorder for MockPerson.
type MockPersonMockRecorder struct {
	mock *MockPerson
}

// NewMockPerson creates a new mock instance.
func NewMockPerson(ctrl *gomock.Controller) *MockPerson {
	mock := &MockPerson{ctrl: ctrl}
	mock.recorder = &MockPersonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPerson) EXPECT() *MockPersonMockRecorder {
	return m.recorder
}

// Address mocks base method.
func (m *MockPerson) Address() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(string)
	return ret0
}

// Address indicates an expected call of Address.
func (mr *MockPersonMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockPerson)(nil).Address))
}

// Age mocks base method.
func (m *MockPerson) Age() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Age")
	ret0, _ := ret[0].(int)
	return ret0
}

// Age indicates an expected call of Age.
func (mr *MockPersonMockRecorder) Age() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Age", reflect.TypeOf((*MockPerson)(nil).Age))
}

// Country mocks base method.
func (m *MockPerson) Country() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Country")
	ret0, _ := ret[0].(string)
	return ret0
}

// Country indicates an expected call of Country.
func (mr *MockPersonMockRecorder) Country() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Country", reflect.TypeOf((*MockPerson)(nil).Country))
}

// Gender mocks base method.
func (m *MockPerson) Gender() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gender")
	ret0, _ := ret[0].(int)
	return ret0
}

// Gender indicates an expected call of Gender.
func (mr *MockPersonMockRecorder) Gender() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gender", reflect.TypeOf((*MockPerson)(nil).Gender))
}

// Name mocks base method.
func (m *MockPerson) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockPersonMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPerson)(nil).Name))
}
